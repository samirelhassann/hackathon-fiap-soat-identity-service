openapi: 3.0.0
info:
  title: Health&Med Identity Service API
  version: 1.0.0
paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                taxvat:
                  type: string
                passwordHash:
                  type: string
                phone:
                  type: string
                role:
                  type: string
                  enum: [PATIENT, DOCTOR, ADMIN]
                doctorDetails:
                  type: object
                  properties:
                    crm:
                      type: integer
                    speciality:
                      type: string
                address:
                  type: object
                  properties:
                    zipcode:
                      type: integer
                    street:
                      type: string
                    number:
                      type: integer
                    observation:
                      type: string
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid input
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  type: string
                  description: Email, taxvat or CRM
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Unauthorized
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Logout successful
        '400':
          description: Invalid input
  /auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh authentication token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  refreshToken:
                    type: string
        '400':
          description: Invalid input
  /users:
    get:
      tags:
        - Users
      summary: Get all users (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsersResponse'
        '403':
          description: Forbidden
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get a user by ID (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '403':
          description: Forbidden
  /users/me:
    get:
      tags:
        - Users
      summary: Get current user details
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /users/me/common:
    put:
      tags:
        - Users
      summary: Update current user common details
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                phone:
                  type: string
                doctorDetails:
                  type: object
                  properties:
                    crm:
                      type: integer
                    speciality:
                      type: string
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
  /users/me/address:
    put:
      tags:
        - Users
      summary: Update current user address details
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: object
                  properties:
                    zipcode:
                      type: integer
                    street:
                      type: string
                    number:
                      type: integer
                    observation:
                      type: string
      responses:
        '200':
          description: Address updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
  /users/me/password:
    put:
      tags:
        - Users
      summary: Update current user password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                passwordHash:
                  type: string
      responses:
        '200':
          description: Password updated successfully
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
  /doctors:
    get:
      tags:
        - Doctors
      summary: Get list of doctors
      parameters:
        - name: speciality
          in: query
          required: false
          schema:
            type: string
        - name: distance
          in: query
          required: false
          schema:
            type: number
        - name: rating
          in: query
          required: false
          schema:
            type: number
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of doctors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDoctorsResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        role:
          type: string
          enum: [PATIENT, DOCTOR, ADMIN]
        email:
          type: string
        taxvat:
          type: string
        passwordHash:
          type: string
        phone:
          type: string
        doctorDetails:
          type: object
          properties:
            crm:
              type: integer
            speciality:
              type: string
        address:
          type: object
          properties:
            zipcode:
              type: integer
            street:
              type: string
            number:
              type: integer
            observation:
              type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Doctor:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        crm:
          type: integer
        speciality:
          type: string
        averageRating:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    PaginatedUsersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          type: object
          properties:
            total:
              type: integer
            page:
              type: integer
            limit:
              type: integer
            hasNext:
              type: boolean
    PaginatedDoctorsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Doctor'
        pagination:
          type: object
          properties:
            total:
              type: integer
            page:
              type: integer
            limit:
              type: integer
            hasNext:
              type: boolean
