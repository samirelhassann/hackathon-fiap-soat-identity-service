generator user {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  SCHEDULED
  CANCELED
  FINISHED
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  taxVat       String   @unique
  passwordHash String
  phone        String
  isAdmin      Boolean
  isDoctor     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  locations                  Location[]
  doctors                    Doctor[]
  patientAppointments        Appointment[]              @relation("PatientAppointments")
  appointmentStatusHistories AppointmentStatusHistory[]

  @@map("users")
}

model Location {
  id          String   @id @default(uuid())
  userId      String   @unique
  latitude    Float
  longitude   Float
  zipCode     String
  street      String
  number      Int
  observation String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("locations")
}

model Doctor {
  id            String   @id @default(uuid())
  userId        String   @unique
  crm           String   @unique
  specialty     String
  averageRating Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user           User                 @relation(fields: [userId], references: [id])
  availabilities DoctorAvailability[]
  appointments   Appointment[]        @relation("DoctorAppointments")

  @@map("doctors")
}

model DoctorAvailability {
  id            String   @id @default(uuid())
  doctorId      String
  dayOfWeek     Int
  availableFrom Int
  availableTo   Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  doctor Doctor @relation(fields: [doctorId], references: [id])

  @@map("doctor_availability")
}

model Appointment {
  id              String            @id @default(uuid())
  patientId       String
  doctorId        String
  appointmentTime DateTime
  duration        Int
  meetingLink     String?
  rating          Int?
  status          AppointmentStatus
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  patient         User                       @relation("PatientAppointments", fields: [patientId], references: [id])
  doctor          Doctor                     @relation("DoctorAppointments", fields: [doctorId], references: [id])
  statusHistories AppointmentStatusHistory[]

  @@map("appointments")
}

model AppointmentStatusHistory {
  id            String   @id @default(uuid())
  appointmentId String
  userId        String
  status        String
  createdAt     DateTime @default(now())

  appointment Appointment @relation(fields: [appointmentId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@map("appointment_status_history")
}
